[{"date":"2017-07-17T16:24:05.000Z","slug":"Mon Jul 17 2017 11:24:05 GMT-0500 (CDT)-07-16-cms-less-and-it-feels-so-right","title":"A Blog-Aware-ish Single Page App with Vue.js and Bear App","tags":["front-end dev","productivity"],"content":"<html><head></head><body><h1 id=\"a-blog-aware-ish-single-page-app-with-vue-js-and-bear-app\">A Blog-Aware-ish Single Page App with Vue.js and Bear App</h1>\n<ul>\n<li>front-end dev</li>\n<li>productivity</li>\n</ul>\n<p>When it comes to Flat File CMSes vs. Static Site Generators vs. Wordpress vs. Squarespace vs. etc etc etc, I&#x2019;m something of a moderate. I have an admittedly huge crush on the <a href=\"https://laravel.com/\">Laravel</a> ecosystem &#x1F60D;, but honestly, I also love learning new things, and I&#x2019;m always going to consider whatever&#x2019;s best for the job. Every project has a different venn diagram of user needs, client needs, developer needs, and deployment complexities.</p>\n<p>When I decided to (finally) focus on making my own website, I knew I wanted to publish it on GitHub Pages (who doesn&#x2019;t love free hosting, right?), but that&#x2026; was about it. I knew I wanted to manage a fair amount of content, but Wordpress seemed like overkill for a few case studies and a blog. <a href=\"https://statamic.com/\">Statamic</a> is my go-to for &#x201C;Wordpress-light&#x201D;, but it requires PHP, and I&#x2019;d honestly rather write in my own favorite markdown editor than in a browser.</p>\n<p><img src=\"images/07-16-cms-less-and-it-feels-so-right/screen-1.png\" alt=\"\">\n<em>If you find yourself writing a lot of markdown, and you aren&#x2019;t using <a href=\"http://www.bear-writer.com/\">Bear App</a>, you&#x2019;re missing out.</em></p>\n<p>Lots of developers rave about Jekyll, and it comes with out of the box support from GitHub Pages, so I started there. I wasn&#x2019;t jazzed about the number of plugins I needed in order to have multiple different kinds of &#x201C;posts,&#x201D; and ultimately, I found myself missing my webpack-based workflow for building assets, and ended up trying a few other frameworks.</p>\n<p><img src=\"images/07-16-cms-less-and-it-feels-so-right/screen-2.png\" alt=\"\">\n<em>And by few, I guess I mean 7.</em> &#x1F62C;</p>\n<p>Middleman was by far my favorite of the static-site generators &#x2014; ruby-based like Jekyll, but way more flexible with its asset pipeline. But as I started to include Vue elements, I realized that Middleman, too, was kind of overkill. Eventually, I realized that all I really wanted was to import some markdown files into a handful of Vue components.</p>\n<p>So, with the help of <a href=\"https://www.npmjs.com/package/markdown-loader\">markdown-loader</a> that&#x2019;s what I ended up doing.</p>\n<p>Since I try to keep my &#x201C;Work&#x201D; page pretty curated, it&#x2019;s not hard to simply update the Vue component to grab another markdown file when I finish writing one. That file looks like this:</p>\n<pre><code>&lt;script&gt;\nexport default {\n  name: &apos;hi&apos;,\n  data () {\n    return {\n      index: [\n        &apos;cat-merrick-studios&apos;,\n        &apos;texas-millennial-institute&apos;,\n        // &apos;my-magic-mud&apos;, // &lt;-- coming soon!\n        &apos;social-evolution&apos;,\n        &apos;at-the-fork-virtual-reality&apos;,\n        // &apos;free-together&apos;\n      ]\n    }\n  },\n  computed: {\n    work: function() {\n      var app = this\n      var work = []\n\n      for (var i in app.index) {\n        var s = require(`../../../work/${app.index[i]}.md`)\n\n        // Fix relative path issues with Marked&apos;s image import\n        var w = s.replace(new RegExp(&apos;\\/images&apos;, &apos;g&apos;), &apos;images&apos;)\n\n        work[i] = { index: i, slug: app.index[i], body: w }\n      }\n      console.log(work)\n      return work\n    }\n  },\n  methods: {}\n}\n&lt;/script&gt;\n</code></pre><p>The blog is a little trickier: you don&#x2019;t want your client-side javascript to be able to traverse a directory (for obvious security reasons), but there&#x2019;s going to be enough content there that it&#x2019;s going to get annoying to track individually.</p>\n<p>Since you <em>can</em> ask Webpack to do a little file-requiring during the build, as long as you explicitly tell it which files to grab, I wrote a simple node script that compiles a JSON directory of the blog posts and iterate through that during build:</p>\n<pre><code>var fs = require(&apos;graceful-fs&apos;)\nvar path = require(&apos;path&apos;)\nvar posts = []\n\nvar list = fs.readdirSync(&apos;./blog&apos;)\n\nfor (p in list) {\n  var filename = list[p]\n\n  // Only get markdown files, not folders\n  if (path.extname(filename) == &apos;.md&apos;) {\n    var stats = fs.statSync(&apos;./blog/&apos; + filename)\n    var date = stats.mtime\n\n    posts[p] = {}\n    posts[p].date = date\n    posts[p].path = filename\n  }\n}\n\nfs.writeFileSync(&apos;blog/manifest.json&apos;, JSON.stringify(posts))\n</code></pre><p>And, tada! Simple, fast, blog-aware-ish, vue-based site that lives on GitHub Pages.</p>\n<p>Next up, I&#x2019;d like to add a blog-aware URL structure for Vue Router, so each post and work item can have it&#x2019;s own permalink.</p>\n</body></html>"},{"date":"2017-07-17T04:19:44.000Z","slug":"Sun Jul 16 2017 23:19:44 GMT-0500 (CDT)-07-16-currently-reading-the-blank-slate","title":"Currently Reading: <em>The Blank Slate</em>","tags":["cognitive science","user experience design"],"content":"<html><head></head><body><h1 id=\"currently-reading-the-blank-slate-\">Currently Reading: <em>The Blank Slate</em></h1>\n<ul>\n<li>cognitive science</li>\n<li>user experience design</li>\n</ul>\n<p><em>Link:</em> <a href=\"https://www.amazon.com/Blank-Slate-Modern-Denial-Nature-ebook/dp/B000QCTNIM/ref=sr_1_1?ie=UTF8&amp;qid=1500250928&amp;sr=8-1&amp;keywords=the+blank+slate\">The Blank Slate: The Modern Denial of Human Nature</a></p>\n<p><img src=\"images/07-16-currently-reading-the-blank-slate/14316417206_4cc28f91a0_b.jpg\" alt=\"\">\n<em>My man Pinker and his crazy, amazing hair. Source: <a href=\"https://c1.staticflickr.com/3/2918/14316417206_4cc28f91a0_b.jpg\">Flickr</a></em></p>\n</body></html>"},{"date":"2017-08-03T04:34:39.000Z","slug":"Wed Aug 02 2017 23:34:39 GMT-0500 (CDT)-07-17-track-video-views-in-airtable","title":"Quick Project: Tracking video views in Airtable","tags":[],"content":"<html><head></head><body><h1 id=\"quick-project-tracking-video-views-in-airtable\">Quick Project: Tracking video views in Airtable</h1>\n<p><a href=\"http://www.emergentorder.com\">Emergent Order</a> started life as a video production house. We&#x2019;ve made award-winning <a href=\"http://www.attheforkfilm.com\">documentaries</a>, television ads, <a href=\"www.artists4america.org/sharewars\">parody videos</a>, mini-docs &#x2014; oh, and <a href=\"https://www.youtube.com/watch?v=GTQnarzmTOc\">music videos</a> featuring rap battles between dead economists.</p>\n<p>As our list of multi-million-view hits grows, it&#x2019;s become increasingly cumbersome to  track exactly how many views EO content has gotten in aggregate &#x2014; so, with the help of our favorite internal <a href=\"www.airtable.com\">database app</a>, I decided to write a quick node.js script that aggregates our views for us.</p>\n<pre><code>// Pull API keys from the .env file\n// Hooray 12-factor best practices :)\nrequire(&apos;dotenv&apos;).config()\n\n/* --------------------------\n/* Initiate class libraries\n/* --------------------------\n/* Airtable\n/* YouTube\n/* jsonfile - for reading/writing json to datafiles\n/* VideoId - for pulling video ids from urls\n/* ------------------------- */\n\nvar Airtable = require(&apos;airtable&apos;)\nvar jsonfile = require(&apos;jsonfile&apos;)\nvar YouTube = require(&apos;youtube-node&apos;)\nconst getVideoId = require(&apos;get-video-id&apos;)\n\n// Init YouTube object &amp; authenticate\nvar youTube = new YouTube()\nyouTube.setKey(process.env.GOOGLE_API_KEY)\n\n// Ignore: JSON storage for testing\nvar data = &apos;data/views.json&apos;\n\n// Blank array to hold our Video data\nvar videos = []\n\n// Init our Airtable connection\nvar base = new Airtable({\n        apiKey: process.env.AIRTABLE_API_KEY\n    }).base(&apos;appjx8uwRv4srcesm&apos;);\n\n// Grab our table from our Airtable Base\nbase(&apos;Placements&apos;).select({\n    // maxRecords: 1,\n    filterByFormula: &quot;NOT({URL} = &apos;&apos;)&quot;\n}).eachPage(function page(records, fetchNextPage) {\n\n    // This function (`page`) will get called for each page of records.\n    records.forEach(function(record) {\n\n        // Get the video ID of each video &amp; the last (manually added) Viewcount\n        var video = getVideoId(record.get(&apos;URL&apos;))\n        var count = record.get(&apos;Viewcount&apos;)\n\n        // Create an empty placeholder video variable\n        var v = { video: video, views: count, newViews: &apos;&apos; }\n\n        // If the video is YouTube (getVideoId returns NOT undefined)\n        if (video) {\n\n          // Ask the YouTube API for stats pretty plz\n          youTube.getById(video[&apos;id&apos;], function (error, result) {\n\n            // If error, log it\n            if (error) {\n              console.log(error);\n            } else {\n\n              // If it&apos;s a YouTube playlist object, evaluate the first item in the list\n              if (result.items.length &gt; -1) {\n\n                // Change ViewCount (a string) into a number for Airtable\n                v.newViews = parseInt(result.items[0].statistics.viewCount)\n                // Add to videos array\n                videos.push(v)\n\n                // Write to JSON file for debugging\n                jsonfile.writeFile(data, videos, function(err) {\n                    console.error(err)\n                });\n\n                // Update Airtable with new video count data\n                base(&apos;Placements&apos;).update(record._rawJson.id, {\n                  &quot;NewViewcounts&quot;: v.newViews\n                }, function(err, record) {\n                    if (err) { console.error(err); return; }\n                    console.log(record.get(&apos;Viewcount&apos;));\n                });\n\n              } else {\n\n                // Otherwise just get the stats for this video\n                v.newViews = result.statistics.viewCount\n                videos.push(v)\n\n                // Update Airtable with new video count data\n                base(&apos;Placements&apos;).update(record._rawJson.id, {\n                  &quot;NewViewcounts&quot;: v.newViews\n                }, function(err, record) {\n                    if (err) { console.error(err); return; }\n                    console.log(record.get(&apos;Viewcount&apos;));\n                });\n              }\n            }\n          })\n        }\n    });\n    fetchNextPage();\n});\n</code></pre></body></html>"}]